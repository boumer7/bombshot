
# BOMBSHOT v1.0 | BY BOUMER7
# Licensed under Mozilla Public License 2.0

import os
import sys
import re

import time
import random

import requests
import json
import threading
from threading import Thread

from transliterate import translit
import proxyscrape
import urllib.request
from fake_useragent import UserAgent

from pathlib import Path

# file with APIs
import apis_services

# https://stackoverflow.com/a/287944
class bcolors:
	HEADER = '\033[95m'
	OKBLUE = '\033[94m'
	OKCYAN = '\033[96m'
	OKGREEN = '\033[92m'
	WARNING = '\033[93m'
	FAIL = '\033[91m'
	ENDC = '\033[0m'
	BOLD = '\033[1m'
	UNDERLINE = '\033[4m'

class bombshot:

	def colored_input():
		u_input = input(bcolors.OKCYAN + '–í–≤–æ–¥' + bcolors.FAIL + ' >> ' + bcolors.WARNING)
		return u_input

	def error_output(text = None):
		return bcolors.FAIL + text

	def warning_output(text = None):
		return bcolors.WARNING + text

	def okcyan_output(text = None):
		return bcolors.OKCYAN + text

	def okgreen_output(text = None):
		return bcolors.OKGREEN + text

	def exiting_program(text = None):
		bombshot.clear()
		print(bombshot.warning_output('[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï]: –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...'))
		exit()

	def exiting_program_error(text = None):
		print(bombshot.error_output('[–û–®–ò–ë–ö–ê]: ' + str(text) + ' –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...'))
		exit()

	def clear():
		os.system('cls' if os.name == 'nt' else 'clear')

	def logo():
		logo = (bcolors.FAIL + 'BOMBSHOT v2.0 üí£' + bcolors.OKCYAN + 
			' | ' + 'BY BOUMER7\n')
		print(logo, end='')
		print(bcolors.WARNING + '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥–∞.')

	# https://stackoverflow.com/a/15924160
	def is_non_zero_file(fpath):
		fpath = Path(fpath)
		try:
			return os.path.isfile(fpath) and os.path.getsize(fpath) > 0
		except OSError as e:
			return e

	# https://stackoverflow.com/a/765436
	def is_bad_proxy(proxy, proxy_timeout = 0.5):
		ua = UserAgent() 

		try:
			proxy_handler = urllib.request.ProxyHandler({'http': proxy})
			opener = urllib.request.build_opener(proxy_handler)
			opener.addheaders = [('User-Agent', ua.random)]
			urllib.request.install_opener(opener)
			req = urllib.request.Request('http://proxyjudge.us/azenv.php')
			sock = urllib.request.urlopen(req, timeout = proxy_timeout)

		except urllib.error.HTTPError:
			return True

		except Exception as detail:
			return True

		return False

	def get_proxies(desired_amount : int = 1, proxy_timeout = 0.5):

		proxies = []

		# https://stackoverflow.com/a/59531141
		try:
			collector_1 = proxyscrape.get_collector('collector-http')

		except proxyscrape.errors.CollectorNotFoundError:
			collector_1 = proxyscrape.create_collector('collector-http', 'http')

		full_list = list(collector_1.get_proxies())

		for item in full_list:
			proxies.append(item.host + ':' + item.port)

		print('–ù–∞–π–¥–µ–Ω–æ', str(len(proxies)), 'HTTP –ø—Ä–æ–∫—Å–∏')
		print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏...')
		print(bcolors.WARNING + '[Ctrl + Z - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã]')


		time.sleep(2.5)
		bombshot.clear()
		start_time = time.time()

		cnt = 0

		print(bcolors.WARNING + '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ' + bcolors.FAIL + ' 0 ' + bcolors.WARNING + '–∏–∑', bcolors.FAIL + str(len(proxies)), bcolors.WARNING + '–ø—Ä–æ–∫—Å–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π', bcolors.OKGREEN + str(proxy_timeout), bcolors.WARNING + 'c–µ–∫...')
		print(bcolors.WARNING + '–í—ã–±—Ä–∞–Ω–æ' + bcolors.FAIL, str(cnt), bcolors.WARNING + '–∏–∑', bcolors.FAIL + str(desired_amount), bcolors.WARNING + '–ø—Ä–æ–∫—Å–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π', bcolors.OKGREEN + str(proxy_timeout), bcolors.WARNING + 'c–µ–∫...')
		print(bcolors.WARNING + '[Ctrl + Z - –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã]')

		checked_proxy = []
		
		for ind, item in enumerate(proxies, start = 1):

			if cnt < desired_amount:

				if bombshot.is_bad_proxy(item, proxy_timeout):
					print(bcolors.WARNING + '[BAD PROXY]')
				else:
					checked_proxy.append(item) 
					cnt += 1
			else:
				break


			bombshot.clear()
			print(bcolors.WARNING + '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ' + bcolors.FAIL, str(ind) + bcolors.WARNING, '–∏–∑', bcolors.FAIL + str(len(proxies)), bcolors.WARNING + '–ø—Ä–æ–∫—Å–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π', bcolors.OKGREEN + str(proxy_timeout), bcolors.WARNING + 'c–µ–∫...')
			print(bcolors.WARNING + '–í—ã–±—Ä–∞–Ω–æ' + bcolors.FAIL, str(cnt) + bcolors.WARNING, '–∏–∑', bcolors.FAIL + str(desired_amount), bcolors.WARNING + '–ø—Ä–æ–∫—Å–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π', bcolors.OKGREEN + str(proxy_timeout), bcolors.WARNING + 'c–µ–∫...')
			print(bcolors.OKCYAN + '[–ù–µ –≤—ã—Ö–æ–¥–∏—Ç–µ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –µ—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏]')
			print(bcolors.WARNING + '[Ctrl + Z - –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã]')


		end_time = time.time()

		extra_message = bcolors.WARNING + '[–î–æ–±–∞–≤–ª–µ–Ω–æ ' + bcolors.FAIL + str(cnt) + bcolors.WARNING + ' –ø—Ä–æ–∫—Å–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {} —Å–µ–∫. –≤ proxy_list.txt'.format(str(proxy_timeout))
		time_passed = bcolors.WARNING + ' –∑–∞ {} —Å–µ–∫.]'.format(round(end_time - start_time, 2))
		extra_message = extra_message + time_passed

		with open('proxy_list.txt', 'a') as infl:
			for item in checked_proxy:
				infl.write(''.join(item) + '\n')

		bombshot.print_full_main_screen(extra_message)

	def to7(phone):
		phone = str(phone)

		if phone[0] in ('7', '8'):
			if len(phone) == 11:
				if phone[0] == '8':
					phone = '7' + phone[1:]
				return phone
			else:
				return False
		else:
			return False

	def generate_credentials():

		vocabulary = '123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'

		name_vocabulary = [
		'–ü–∞–≤–µ–ª', '–ú–∏—Ö–∞–∏–ª', '–ò–≤–∞–Ω', '–ú–∞—Ç–≤–µ–π', '–ò–≥–æ—Ä—å', '–í–ª–∞–¥–∏–º–∏—Ä',
		'–ú–∏—Ö–∞–∏–ª', '–ì–µ–æ—Ä–≥–∏–π', '–°–∞–≤–µ–ª–∏–π', '–ù–∏–∫–∏—Ç–∞', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', 
		'–ê–Ω–¥—Ä–µ–π', '–†–æ–¥–∏–æ–Ω', '–ú–∞–∫—Å–∏–º', '–î–∞–Ω–∏–∏–ª', '–ö–∏—Ä–∏–ª–ª', '–õ–µ–≤', 
		'–ê–ª–µ–∫—Å–µ–π', '–†–æ–º–∞–Ω', '–ú–∞—Ä–∫', '–ú–∞–∫–∞—Ä', '–ï–≥–æ—Ä', '–¢–∏—Ö–æ–Ω', 
		'–¢–∏–º–æ—Ñ–µ–π', '–°—Ç–µ–ø–∞–Ω'
		]

		surname_vocabulary = [
		'–°–º–∏—Ä–Ω–æ–≤', '–Ø–∫–æ–≤–ª–µ–≤', '–í–æ—Ä–æ–±—å–µ–≤', '–§–æ–º–∏–Ω', '–ú–∏—Ä–æ–Ω–æ–≤',
		'–ö–∞–ø—É—Å—Ç–∏–Ω', '–°–æ–±–æ–ª–µ–≤', '–ó–∞—Ö–∞—Ä–æ–≤', '–ê–∫–∏–º–æ–≤', '–ö—Ä–∞–≤—Ü–æ–≤',
		'–ù–æ–≤–∏–∫–æ–≤', '–ê—Ñ–∞–Ω–∞—Å—å–µ–≤', '–ö–æ–ª–æ—Å–æ–≤', '–ê–Ω—Ç–æ–Ω–æ–≤', '–î–µ–Ω–∏—Å–æ–≤',
		'–ê–ª–µ–∫—Å–µ–µ–≤', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤', '–†–æ–º–∞–Ω–æ–≤', '–ë–æ—á–∞—Ä–æ–≤', '–ü–∞–≤–ª–æ–≤',
		'–ó—É–±–∫–æ–≤', '–ú–µ—â–µ—Ä—è–∫–æ–≤', '–ê–Ω–¥—Ä–µ–µ–≤'
		]

		patronymic_vocabulary = [
		'–ê—Ä—Ç—ë–º–æ–≤–∏—á', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á', '–õ–µ–æ–Ω–∏–¥–æ–≤–∏—á', '–ì–µ–æ—Ä–≥–∏–µ–≤–∏—á',
		'–ê–Ω–¥—Ä–µ–µ–≤–∏—á', '–ò–≥–æ—Ä–µ–≤–∏—á', '–ú–∞–∫—Å–∏–º–æ–≤–∏—á', '–†–æ–º–∞–Ω–æ–≤–∏—á', 
		'–î–∞–≤–∏–¥–æ–≤–∏—á', '–í–∏–∫—Ç–æ—Ä–æ–≤–∏—á', '–ï–≥–æ—Ä–æ–≤–∏—á', '–û–ª–µ–≥–æ–≤–∏—á',
		'–°–µ—Ä–≥–µ–µ–≤–∏—á', '–§—ë–¥–æ—Ä–æ–≤–∏—á'
		]

		email_vocabulary = [
		'gmail.com', 'yandex.ru', 'ya.ru', 'bk.ru', 'mail.ru',
		'yahoo.com', 'list.ru', 'ya.kz', 'yandex.ua', 'ya.ua',
		'yandex.kz', 'ya.kz', 'inbox.ru','internet.ru', 'inbox.ru',
		'yandex.by', 'ya.by'
		]

		password = ''
		for x in range(12):
			password += random.choice(vocabulary)

		rand_end = random.randint(1, 3)

		# randomizing the ending of email, 1 - just random number, 2 - random full year, 3 - random shortened year
		if rand_end == 1:
			rand_end = random.randint(500, 999)
		elif rand_end == 2:
			rand_end = random.randint(1965, 1999)
		else:
			rand_end = str(random.randint(1965, 1999))[2:]

		# random separator
		# write name_surname or namesurname or name-surname (underscore True or False)
		rand_sep = random.randint(1, 3)
		if rand_sep == 1:
			rand_sep = '_'
		elif rand_sep == 2:
			rand_sep = '-'
		else:
			rand_sep = ''

		name = random.choice(name_vocabulary)
		latin_name = translit(name, 'ru', reversed=True).replace("'", "").replace('j', 'y')

		surname = random.choice(surname_vocabulary)
		latin_surname = translit(surname, 'ru', reversed=True).replace("'", "").replace('j', 'y')

		patronymic = random.choice(patronymic_vocabulary)

		email_value = latin_name.lower() + rand_sep + latin_surname.lower() + str(rand_end)

		email = "{}@{}".format(email_value, random.choice(email_vocabulary))

		return name, surname, patronymic, latin_name, email, password

	def update_value():
		return bombshot.okcyan_output(', - –û–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è')

	def zero_to_exit():
		return bombshot.error_output('0 - –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã')

	def go_back():
		return bombshot.okgreen_output('. - –ù–∞–∑–∞–¥')

	def preinstalled_list():
		print(bombshot.okcyan_output('–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Ä—Ç–≤—É:'), end='')
		print(bcolors.WARNING)
		with open('class_surnames.txt', 'r') as infl:
			for ind, i in enumerate(infl, start = 1):
				print(ind, '-', i, end='')

		print(bombshot.go_back())
		print(bombshot.zero_to_exit())

		# len of people
		return ind

	def random_name_generator():
		bombshot.clear()
		creds = bombshot.generate_credentials()
		print('–§–ò–û:', creds[1], creds[0], creds[2])
		latin_full_name = creds[1] + ' ' + creds[0] + ' ' + creds[2]

		print('–ò–º—è –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ:', translit(latin_full_name, 'ru', reversed = True).replace("'", "").replace('j', 'y').replace('J', 'Y'))

		print('–ü–æ—á—Ç–∞:', creds[4])
		print('–ü–∞—Ä–æ–ª—å:', creds[5])

		print(bombshot.go_back())
		print(bombshot.update_value())
		print(bombshot.zero_to_exit())

		next_input = bombshot.colored_input()

		if next_input == '.':
			bombshot.clear()
			bombshot.print_full_main_screen()

		elif next_input == '0':
			print(bombshot.exiting_program())
			exit()

		elif next_input == ',':
			bombshot.random_name_generator()

		else:
			bombshot.exiting_program_error('–û–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

	def shuffle_proxies():
		proxies = []
		with open('proxy_list.txt', 'r') as infl:
			for i in infl:
				proxies.append(i.replace('\n', ''))

		random.shuffle(proxies)

		with open('proxy_list.txt', 'w') as infl:
			for i in proxies:
				infl.write(i + '\n')

		colors = [bcolors.OKBLUE, bcolors.OKGREEN, bcolors.OKCYAN, bcolors.HEADER, bcolors.ENDC]

		c1 = random.choice(colors)
		c2 = random.choice(colors)

		while c2 == c1:
			c2 = random.choice(colors)

		bombshot.print_full_main_screen(bombshot.warning_output('%s[–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—à–∞–Ω–æ %s %s–ø—Ä–æ–∫—Å–∏ –≤ proxy_list.txt]' % (c1, bcolors.FAIL + str(len(proxies)), c2) ))

	def count_services():
		apis_file = open('apis_services.py')
		apis_content = apis_file.read()

		services_count = apis_content.count('requests.post') + apis_content.count('requests.get')
		print(bombshot.warning_output('–°–µ—Ä–≤–∏—Å—ã:'), str(bombshot.error_output(str(services_count))))

	def print_proxy_screen():
		bombshot.clear()
		print(bombshot.warning_output('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏:'))
		print(bombshot.go_back())
		print(bombshot.zero_to_exit())

		next_input = bombshot.colored_input()

		if next_input == '.':
			bombshot.print_full_main_screen()

		elif next_input == '0':
			bombshot.exiting_program()

		elif next_input.isdigit():

			if 1 <= int(next_input) <= 1000:
				bombshot.clear()
				print(bombshot.warning_output('–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–æ–∫—Å–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –æ—Ç 0.1 –¥–æ 10):\n–ß–µ–º –≤—ã—à–µ –∑–∞–¥–µ—Ä–∂–∫–∞, —Ç–µ–º –¥–æ–ª—å—à–µ –±—É–¥–µ—Ç –ø–æ–∏—Å–∫.'))
				print(bombshot.go_back())
				print(bombshot.zero_to_exit())
				print(bombshot.warning_output('[–í–≤–µ–¥–∏—Ç–µ N/n, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (0.5 —Å–µ–∫.)]'))

				proxy_timeout = bombshot.colored_input()

				if proxy_timeout == '.':
					bombshot.print_full_main_screen()

				elif proxy_timeout == '0':
					bombshot.exiting_program()

				elif proxy_timeout == 'N' or proxy_timeout == 'n':
					bombshot.get_proxies(int(next_input), 0.5)

				elif isinstance(float(proxy_timeout), float) or isinstance(int(proxy_timeout), int):

					if 0.1 <= float(proxy_timeout) <= 10.0:

						bombshot.get_proxies(int(next_input), float(proxy_timeout))
					else:
						bombshot.print_full_main_screen()
						print(bombshot.error_output('[–û–®–ò–ë–ö–ê]: –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–∫—Å–∏'))

				else:
					bombshot.exiting_program_error('–û–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
			else:
				bombshot.print_full_main_screen()
				print(bombshot.error_output('[–û–®–ò–ë–ö–ê]: –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–∫—Å–∏'))

		else:
			bombshot.exiting_program_error('–û–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

	def print_phone_input_screen():
		bombshot.clear()
		print('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞),\n–Ω–∞—á–∏–Ω–∞—è —Å 7 –∏–ª–∏ 8:')

		print(bombshot.go_back())
		print(bombshot.zero_to_exit())

		phone_n = bombshot.colored_input()

		if phone_n == '.':
			bombshot.print_full_main_screen()

		elif phone_n == '0':
			bombshot.exiting_program()

		else:

			if bombshot.to7(phone_n):
				# fixed phone
				fixed_phone = bombshot.to7(phone_n)

				bombshot.clear()
				print(bombshot.warning_output('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤:'))
				print(bombshot.go_back())
				print(bombshot.zero_to_exit())

				cycles_cnt = bombshot.colored_input()

				if cycles_cnt == '.':
					bombshot.print_phone_input_screen()
				elif cycles_cnt == '0':
					bombshot.exiting_program()
				elif cycles_cnt.isdigit():

					creds = bombshot.generate_credentials()

					name = creds[0]
					surname = creds[1]
					patronymic = creds[2]
					latin_name = creds[3]
					email = creds[4]
					password = creds[5]

					ua = UserAgent()
					useragent = ua.random
					proxy = ''

					cycles_cnt = int(cycles_cnt)

					bombshot.clear()
					print(bombshot.warning_output('–° –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –±–µ–∑?\n1 - —Å –ø—Ä–æ–∫—Å–∏\n2 - –±–µ–∑ –ø—Ä–æ–∫—Å–∏'))
					print(bombshot.go_back())
					print(bombshot.zero_to_exit())

					proxy_option = bombshot.colored_input()

					process_phrases = ['[–ë–£–ú–ë–ê–°–ò–†–£–ï–ú...]', '[–ü–ï–†–ï–ï–ó–ñ–ê–ï–ú –ë–£–ú–ë–ê–¢–†–ê–ö–¢–û–†–û–ú...]',
										'[–ó–ê–°–¢–ê–í–õ–Ø–ï–ú –ñ–†–ê–¢–¨ –ë–£–ú–ë–ê–°–Ø–¢–ò–ù–£...]', '[–ù–ê–ß–ò–ù–ê–ï–ú –ë–£–ú–ë–ê–°–ò–†–û–í–ö–£...]']	

					# with proxy
					if bombshot.is_non_zero_file(os.getcwd() + '/proxy_list.txt') and proxy_option == '1':
						lines = list(open('proxy_list.txt', 'r'))
						proxies = []

						for i in lines:
							proxies.append(i.replace('\n', ''))

						# proxies = {'http': "http://{}".format(proxy), 'https':"http://{}".format(proxy)}

						print(bcolors.WARNING + random.choice(process_phrases) 
							+ ': {} ({} —Ü–∏–∫–ª–æ–≤ * {} –ø—Ä–æ–∫—Å–∏) —Ä–∞–∑ –Ω–∞ {}'.format(bcolors.FAIL + str(cycles_cnt * len(proxies)) + bcolors.WARNING,
							bcolors.FAIL + str(cycles_cnt) + bcolors.WARNING, bcolors.FAIL + str(len(proxies)) + bcolors.WARNING, 
							bcolors.FAIL + fixed_phone))
						print(bcolors.WARNING + '(–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Å–º—Å –Ω–∞—á–∞–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å)')

						print(bcolors.WARNING + '[Ctrl + Z - –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã]')

						for i in range(cycles_cnt):

							for z in proxies:
								proxies = {'http': "http://{}".format(z), 'https':"http://{}".format(z)}

								Thread(apis_services.send_sms(fixed_phone, name, surname, patronymic, latin_name, email, password, useragent, i, z, proxy)).start()
								time.sleep(5)

								if i == cycles_cnt and z == proxies:
									break
									bombshot.print_full_main_screen(bombshot.warning_output('[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} —Ü–∏–∫–ª–æ–≤ —Å {} –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω {}]').format(bcolors.FAIL + str(cycles_cnt * len(proxies)) + bcolors.WARNING, bcolors.FAIL + str(z) + bcolors.WARNING, bcolors.FAIL + fixed_phone + bcolors.WARNING))

					elif not bombshot.is_non_zero_file(os.getcwd() + '/proxy_list.txt') and proxy_option == '1':
						bombshot.clear()
						bombshot.print_full_main_screen()
						print(bombshot.exiting_program_error('–ü—Ä–æ–∫—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ proxy_list.txt'))

					elif proxy_option == '2':

						print(bcolors.WARNING + random.choice(process_phrases) + ': {} —Ü–∏–∫–ª–æ–≤ –Ω–∞ {}'.format(bcolors.FAIL + str(cycles_cnt) + bcolors.WARNING, bcolors.FAIL + fixed_phone) + bcolors.WARNING + '\n(–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Å–º—Å –Ω–∞—á–∞–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å)')
						print(bcolors.WARNING + '[Ctrl + Z - –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã]')


						for i in range(cycles_cnt):

							Thread(apis_services.send_sms(fixed_phone, name, surname, patronymic, latin_name, email, password, useragent)).start()
							time.sleep(5)
							
							if i == cycles_cnt:
								break
								bombshot.print_full_main_screen(bombshot.warning_output('[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} —Ü–∏–∫–ª–æ–≤ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω {}]').format(bcolors.FAIL + str(cycles_cnt) + bcolors.WARNING, bcolors.FAIL + fixed_phone + bcolors.WARNING))

					elif proxy_option == '.':
						bombshot.print_phone_input_screen()

					elif proxy_option == '0':
						bombshot.exiting_program()

					# without proxy
					else:
						bombshot.print_full_main_screen()
						print(bombshot.error_output('[–û–®–ò–ë–ö–ê]: –û–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'))
						

			else:				
				bombshot.clear()
				print(bombshot.error_output('[–û–®–ò–ë–ö–ê]: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.'))
				bombshot.print_full_main_screen()
						
	def print_full_main_screen(extra_message = None):
		bombshot.clear()
		bombshot.logo()
		bombshot.count_services()

		if extra_message is not None:
			print(extra_message)

		bombshot.main_screen()

	def clear_txt_file():

		if bombshot.is_non_zero_file(os.getcwd() + '/proxy_list.txt'):

			bombshot.clear()
			print(bombshot.warning_output('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ proxy_list.txt?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.'))
			print(bcolors.FAIL + '1' + bcolors.WARNING + ' - –î–∞')
			print(bcolors.FAIL + '2' + bcolors.WARNING + ' - –ù–µ—Ç')

			print(bombshot.go_back())
			print(bombshot.zero_to_exit())

			user_option = bombshot.colored_input()

			if user_option == '.':
				bombshot.print_full_main_screen()

			elif user_option == '0':
				bombshot.exiting_program()

			elif user_option == '1' and bombshot.is_non_zero_file(os.getcwd() + '/proxy_list.txt'):

				proxies = []

				with open('proxy_list.txt', 'r') as infl:
					for i in infl:
						proxies.append(i.replace('\n', ''))

				proxies_cnt = len(proxies)
				proxies = []

				f = open('proxy_list.txt', 'w')
				bombshot.print_full_main_screen()

			elif user_option == '1' and not bombshot.is_non_zero_file(os.getcwd() + '/proxy_list.txt'):
				bombshot.print_full_main_screen(bcolors.FAIL + '[–û–®–ò–ë–ö–ê]: proxy_list.txt —É–∂–µ –ø—É—Å—Ç.')

			elif user_option == '2':
				bombshot.print_full_main_screen()

		else:
			bombshot.print_full_main_screen(bcolors.FAIL + '[–û–®–ò–ë–ö–ê]: proxy_list.txt —É–∂–µ –ø—É—Å—Ç.')



	def main_screen():
		print(bcolors.OKGREEN + '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:\n' + bcolors.FAIL +
			'1 - –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n' + bcolors.WARNING +
			'2 - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n' +
			'3 - –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–∫—Å–∏\n' +
			'4 - –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –≤ —Å–ø–∏—Å–∫–µ\n' + bcolors.OKCYAN +
			'd - –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏\n' + bcolors.FAIL + 
			'0 - –í—ã—Ö–æ–¥')
		
		if not bombshot.is_non_zero_file(os.getcwd() + '/proxy_list.txt'):
			print(bombshot.warning_output('[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï]: –§–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç, –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã\n–±—É–¥—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Å –≤–∞—à–µ–≥–æ IP, —á—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ\n–º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∞–π—Ç–∞—Ö.\n–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏ –≤–≤–µ–¥–∏—Ç–µ ' + bcolors.FAIL + '5'))
		else:
			i = 0
			with open('proxy_list.txt', 'r') as infl:
				for line in infl:
					i += 1

			print(bcolors.WARNING +'[–ó–∞–≥—Ä—É–∂–µ–Ω–æ ' + bcolors.FAIL + f'{i}' + bcolors.WARNING + ' –ø—Ä–æ–∫—Å–∏ –≤ proxy_list.txt]')

		user_option = bombshot.colored_input()

		if user_option == '1':
			bombshot.print_phone_input_screen()

		elif user_option == '2':
			bombshot.random_name_generator()

		elif user_option == '3':
			bombshot.print_proxy_screen()

		elif user_option == '4':
			bombshot.shuffle_proxies()

		elif user_option == 'd':
			bombshot.clear_txt_file()

		elif user_option == '0':
			print(bombshot.exiting_program())
			exit()
		else:
			bombshot.exiting_program_error('–û–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

if __name__ == '__main__':
	bombshot.print_full_main_screen()
